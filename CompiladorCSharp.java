/* CompiladorCSharp.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorCSharp.java */
package compiler;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class CompiladorCSharp implements CompiladorCSharpConstants {

    public static void main(String[] args) {
        try {
            String programa = Read("codigoTeste.txt");
            new CompiladorCSharp(new java.io.StringReader(programa)).RUN();
            System.out.println("\n\nA Sintaxe Correta. Compilado com Sucesso!.");
        } catch(Throwable e) {
            System.out.println("\n\nErro na sintaxe: " + e.getMessage());
        }
    }

    public static String Read(String caminho) throws Exception {
        StringBuilder conteudo = new StringBuilder();
        try {
            FileReader arq = new FileReader(caminho);
            BufferedReader lerArq = new BufferedReader(arq);
            String linha;
            while ((linha = lerArq.readLine()) != null) {
                conteudo.append(linha).append("\n");
            }
            arq.close();
        } catch (FileNotFoundException ex) {
            throw new Exception("Arquivo nao encontrado: " + ex.getMessage());
        } catch (IOException ex) {
            throw new Exception("Erro na leitura do arquivo: " + ex.getMessage());
        }
        return conteudo.toString();
    }

/****************************************
* ******** GRAMATICA LINGUAGEM C# *******
*****************************************/
  static final public 
void RUN() throws ParseException {
    Programa();
}

  static final public void Programa() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case USING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      DeclararUsing();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NAMESPACE:{
      DeclararNamespace();
      break;
      }
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case INTERNAl:{
      DeclararClassePrincipal();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*  ESTRUTURA GERAL DE UM PROJETO EM C#
                IMPORTACOES : using System
                NAMESPACE  :   namespace {   [public class Atividade1 {  }]    }(PODE EXISTIR OU NAO)
                PRINCIPAL DA CLASE: public class Atividade1 {  }
* */
  static final public 
void DeclararUsing() throws ParseException {
    jj_consume_token(USING);
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PONTO:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(PONTO);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(PONTO_VIRGULA);
}

/*DECLARANDO AS IMPORTACOES DAS BIBLIOTECAS EM C#: using System;
                                                   using System.Mathematics.pow; (extendida)
* */
  static final public 
void DeclararNamespace() throws ParseException {
    jj_consume_token(NAMESPACE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_CHAVE);
    DeclararClassePrincipal();
    jj_consume_token(FECHA_CHAVE);
}

/*DECLARACAO DO NAMESPACE DO PACOTE? namespace Atividade1 {   [aqui fica public class]    }
* */
  static final public 
void DeclararClassePrincipal() throws ParseException {
    Modificador();
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_CHAVE);
    CorpoClasse();
    jj_consume_token(FECHA_CHAVE);
}

/*DECLARA A CLASSE PRINCIPAL :  public class Atividade1 {    [Main fica aqui] }
* */
  static final public 
void CorpoClasse() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case VAR:
      case FLOAT:
      case BOOL:
      case CHAR:
      case STRING:
      case VOID:
      case STATIC:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case INTERNAl:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case INTERNAl:{
        Modificador();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      TipoDeDados();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PONTO_VIRGULA:
        case VIRGULA:
        case RECEBE:{
          Instanciarvariavel();
          break;
          }
        case ABRE_PARENTESES:{
          InstanciaFuncao();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case MAIN:{
        Main();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/*PODE SER DECLARACAO public static string nome = "oe"
           FUNCAO      public static void print(){ }
           MAIN        public static void Main(String[] args){ }
           CONSTRUTOR
* */
  static final public 
void Instanciarvariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RECEBE:{
      jj_consume_token(RECEBE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case ABRE_PARENTESES:
      case NEGACAO:
      case MAIS:
      case MENOS:
      case IDENTIFICADOR:
      case INTEGER_LITERAL:
      case FLOATING_LITERAL:
      case STRING_LITERAL:{
        Expressao();
        break;
        }
      case INPUT:{
        Input();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RECEBE:{
        jj_consume_token(RECEBE);
        Expressao();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    }
    jj_consume_token(PONTO_VIRGULA);
}

/* INSTANCIA A VARIAVEL :  = (expressao |null | true | false )/
   OU VARIAS SEGUIDAS   = "rom" , sobrenome = "ferr", nomeCompleto = "rom ferr"/
                         , nome2, nome3,
       INPUT            = Console.ReadLine()
* */
  static final public 

void InstanciaFuncao() throws ParseException {
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case VAR:
    case FLOAT:
    case BOOL:
    case CHAR:
    case STRING:
    case VOID:{
      ListaDeParametros();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoes();
}

/*  INSTANCIA A VARIAVEL COMO UMA FUNCAO :  ( string nome, int numero ) { }
                                            () { }

* */
  static final public 
void ListaDeParametros() throws ParseException {
    TipoDeDados();
    jj_consume_token(IDENTIFICADOR);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      TipoDeDados();
      jj_consume_token(IDENTIFICADOR);
    }
}

/* LISTA DE PARAMETROS DE UMA FUNCAO : string nome
                                     : string nome, string sobrenome, int idade
* */
  static final public 
void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(STRING);
    jj_consume_token(ABRE_COLCHETE);
    jj_consume_token(FECHA_COLCHETE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoes();
}

/* INSTANCIA O CORPO DA CLASSE COMO UM MAIN:  public static void Main(string[] args) { }
* */
  static final public 
void BlocoDeDeclaracoes() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case VAR:
      case FLOAT:
      case BOOL:
      case CHAR:
      case STRING:
      case VOID:
      case RETURN:
      case IF:
      case PRINT:
      case INPUT:
      case WHILE:
      case INCREMENTO:
      case DECREMENTO:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      CorpoDaDeclaracao();
    }
    jj_consume_token(FECHA_CHAVE);
}

/*  BLOCO DE CODIGO DA DECLARACAO DE TODAS AS DECLARAÇÕES:  {  [ if| print| while| expressao | return | declarar variavel] }
* */
  static final public 
void ChamarFuncao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case MAIS:
    case MENOS:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case STRING_LITERAL:{
      ListaDeArgumentos();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO_VIRGULA);
}

  static final public void CorpoDaDeclaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      ChamarFuncao();
      break;
      }
    case INT:
    case VAR:
    case FLOAT:
    case BOOL:
    case CHAR:
    case STRING:
    case VOID:{
      DeclararVariavel();
      break;
      }
    case INCREMENTO:
    case DECREMENTO:{
      AtribuirVariavel();
      break;
      }
    case RETURN:{
      RetornoDaFuncao();
      break;
      }
    case IF:{
      If_Else();
      break;
      }
    case PRINT:{
      Print();
      break;
      }
    case INPUT:{
      Input();
      jj_consume_token(PONTO_VIRGULA);
      break;
      }
    case WHILE:{
      While();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* CORPO PRINCIPAL DA APLICAÃO COM AS PRINCIPAIS CARACTERISTICAS DA LINGUAGEM COMO:
           DECLARAR UMA VARIAVEL :  string nome [ = expressao | true | false| null]
           RETORNO DA FUNCAO: return [ = expressao | true | false| null];
           IF e ELSE : if(){}    if(){} else{}
           PRINT : Console.WriteLine("teste");
           INPUT : Console.ReadLine();
           WHILE   : while(expressao| true | false) {}
           EXPRESSAO : ...
* */
  static final public 
void DeclararVariavel() throws ParseException {
    TipoDeDados();
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PONTO_VIRGULA:
    case VIRGULA:
    case RECEBE:{
      Instanciarvariavel();
      break;
      }
    case ABRE_PARENTESES:{
      InstanciaFuncao();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* DECLARA UMA VARIAVEL:   string nome [ = expressao | true | false| null]
                FUNCAO :  string getnome(lista, lista)
* */
  static final public 
void AtribuirVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFICADOR:{
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PONTO_VIRGULA:
      case VIRGULA:
      case RECEBE:{
        Instanciarvariavel();
        break;
        }
      case INCREMENTO:
      case DECREMENTO:
      case MAIS_IGUAL:
      case MENOS_IGUAL:
      case ASTERISCO_IGUAL:
      case BARRA_IGUAL:
      case PORCENTO_IGUAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCREMENTO:{
          jj_consume_token(INCREMENTO);
          break;
          }
        case DECREMENTO:{
          jj_consume_token(DECREMENTO);
          break;
          }
        case MAIS_IGUAL:
        case MENOS_IGUAL:
        case ASTERISCO_IGUAL:
        case BARRA_IGUAL:
        case PORCENTO_IGUAL:{
          ExpressaoNumericaComAtribuicao();
          Expressao();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case INCREMENTO:
    case DECREMENTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTO:{
        jj_consume_token(INCREMENTO);
        break;
        }
      case DECREMENTO:{
        jj_consume_token(DECREMENTO);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PONTO_VIRGULA);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* ATRIBUI UM VALOR A VARIAVEL:   nome [ = expressao | true | false| null]
                                   nome++;
                                   ++nome;
                                   nome += expressao ;
* */
  static final public 

void ExpressaoNumericaComAtribuicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIS_IGUAL:{
      jj_consume_token(MAIS_IGUAL);
      break;
      }
    case MENOS_IGUAL:{
      jj_consume_token(MENOS_IGUAL);
      break;
      }
    case ASTERISCO_IGUAL:{
      jj_consume_token(ASTERISCO_IGUAL);
      break;
      }
    case BARRA_IGUAL:{
      jj_consume_token(BARRA_IGUAL);
      break;
      }
    case PORCENTO_IGUAL:{
      jj_consume_token(PORCENTO_IGUAL);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* FAZ O FINAL DE UMA OPERACAO ARITMETRICA COMM ATRIBUICAO [valor ] +=  10
* */
  static final public 
void RetornoDaFuncao() throws ParseException {
    jj_consume_token(RETURN);
    Expressao();
    jj_consume_token(PONTO_VIRGULA);
}

/* RETORNO DE UMA FUNCAO:   return [ = expressao | true | false| null];
* */
  static final public 
void If_Else() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    Expressao();
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoesWhile();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      BlocoDeDeclaracoesWhile();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
}

/*  IF e ELSE : if(){}    if(){} else{}'
* */
  static final public 
void Expressao() throws ParseException {
    item();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIOR:
    case MENOR:
    case IGUAL:
    case MAIOR_IGUAL:
    case MENOR_IGUAL:
    case DIFERENTE:
    case OR:
    case AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAIOR:{
        jj_consume_token(MAIOR);
        break;
        }
      case MENOR_IGUAL:{
        jj_consume_token(MENOR_IGUAL);
        break;
        }
      case MAIOR_IGUAL:{
        jj_consume_token(MAIOR_IGUAL);
        break;
        }
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      item();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:
    case AND:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        break;
        }
      case OR:{
        jj_consume_token(OR);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expressao();
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
}

/* EXPRESSOES DA GRAMATICA
            TRUE | FALSE | !TRUE | ! FALSE| NULL
            COMPARACOES : 9> 2
            OPERACOES: 2+2   | 3/8 | 3%1 ...
            E LOGICAS COMPLEXAS COM PARENTESES

* */
  static final public 
void item() throws ParseException {
    termo();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:{
        jj_consume_token(MAIS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termo();
    }
}

  static final public void termo() throws ParseException {
    itemUnico();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISCO:
      case BARRA:
      case PORCENTO:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISCO:{
        jj_consume_token(ASTERISCO);
        break;
        }
      case BARRA:{
        jj_consume_token(BARRA);
        break;
        }
      case PORCENTO:{
        jj_consume_token(PORCENTO);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      itemUnico();
    }
}

  static final public void itemUnico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIS:
    case MENOS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:{
        jj_consume_token(MAIS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    Item();
}

  static final public void Item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    case FLOATING_LITERAL:{
      jj_consume_token(FLOATING_LITERAL);
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
      break;
      }
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case IDENTIFICADOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEGACAO:{
        jj_consume_token(NEGACAO);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        VariavelExpressao();
        break;
        }
      case ABRE_PARENTESES:{
        jj_consume_token(ABRE_PARENTESES);
        Expressao();
        jj_consume_token(FECHA_PARENTESES);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* UM ITEM PODE SER QUALQUER VALOR:
                        INTEIRO: 3
                        STRING: "rom"
                        FLOATING: 5.9f
                        NULL: null
               VALORES COM NEGACAO:  ! [ variavel(tipo bool | funcao tipo bool)  | expressao (5>7) | true | false]
*/
  static final public 
void VariavelExpressao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABRE_PARENTESES:
    case INCREMENTO:
    case DECREMENTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABRE_PARENTESES:{
        jj_consume_token(ABRE_PARENTESES);
        ListaDeArgumentos();
        jj_consume_token(FECHA_PARENTESES);
        break;
        }
      case INCREMENTO:{
        jj_consume_token(INCREMENTO);
        break;
        }
      case DECREMENTO:{
        jj_consume_token(DECREMENTO);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
}

/*  CASO HAJA UMA VARIAVEL NA EXPRESSAO ELA TEM OS CAMINHOS:
                                         FUNCAO: soma(2,3)
                                         INCREMENTO: soma++
                                         DECREMENTO: soma--
                                         SO O VALOR DA VARIAVEL: soma
* */
  static final public 
void Print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(ABRE_PARENTESES);
    Expressao();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO_VIRGULA);
}

/*PRINT : Console.WriteLine("teste");
* */
  static final public 
void Input() throws ParseException {
    jj_consume_token(INPUT);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(FECHA_PARENTESES);
}

/*PRINT : INPUT : Console.ReadLine()
* */
  static final public 
void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRE_PARENTESES);
    Expressao();
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoesWhile();
}

/*WHILE   : while(expressao| true | false) {}
* */
  static final public 
void Modificador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIVATE:{
      jj_consume_token(PRIVATE);
      break;
      }
    case PROTECTED:{
      jj_consume_token(PROTECTED);
      break;
      }
    case PUBLIC:{
      jj_consume_token(PUBLIC);
      break;
      }
    case INTERNAl:{
      jj_consume_token(INTERNAl);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* MODIFICADORES DE ACESSO DA CLASSE, FUNCAO OU VARIAVEL
           public int = 1 | protected nome = "rom"| private senha = "88" | internal some()
* */
  static final public void TipoDeDados() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    case VAR:{
      jj_consume_token(VAR);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* TIPO DE DADO DA VARIAVEL | FUNCAO E CLASSE;
* */
  static final public 
void ListaDeArgumentos() throws ParseException {
    Expressao();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRGULA);
      Expressao();
    }
}

/* LISTA DE ARGUMENTOS DE UMA FUNCAO: soma(2, 2)
* */
  static final public 
void BlocoDeDeclaracoesWhile() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case VAR:
      case FLOAT:
      case BOOL:
      case CHAR:
      case STRING:
      case VOID:
      case RETURN:
      case IF:
      case PRINT:
      case INPUT:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case INCREMENTO:
      case DECREMENTO:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_10;
      }
      CorpoDaDeclaracaoWhile();
    }
    jj_consume_token(FECHA_CHAVE);
}

  static final public void CorpoDaDeclaracaoWhile() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENTO:
    case DECREMENTO:
    case IDENTIFICADOR:{
      AtribuirVariavel();
      break;
      }
    case RETURN:{
      RetornoDaFuncao();
      break;
      }
    case INT:
    case VAR:
    case FLOAT:
    case BOOL:
    case CHAR:
    case STRING:
    case VOID:{
      DeclararVariavel();
      break;
      }
    case IF:{
      If_Else();
      break;
      }
    case PRINT:{
      Print();
      break;
      }
    case INPUT:{
      Input();
      jj_consume_token(PONTO_VIRGULA);
      break;
      }
    case WHILE:{
      While();
      break;
      }
    case BREAK:{
      jj_consume_token(BREAK);
      jj_consume_token(PONTO_VIRGULA);
      break;
      }
    case CONTINUE:{
      jj_consume_token(CONTINUE);
      jj_consume_token(PONTO_VIRGULA);
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorCSharpTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8000,0x3c10000,0x0,0x3e83f00,0x3c00000,0x200000,0x0,0x40000,0xb0004000,0x0,0x0,0x0,0x83f00,0x0,0xc4183f00,0x30004000,0xc4183f00,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x30004000,0x0,0x0,0x3c00000,0x83f00,0x0,0xc4183f00,0xc4183f00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x800,0x0,0x0,0x0,0x1608,0x0,0x6008008,0x1000,0x400,0x1000,0x0,0x400,0x1800001,0x6008008,0x1800001,0x1608,0xc1800000,0xc1801600,0x1800000,0x1800000,0xc0000000,0x0,0x7e6000,0x7e6000,0x600000,0x600000,0x6000000,0x6000000,0x38000000,0x38000000,0x6000000,0x6000000,0x8000,0x8,0x8008,0x1800008,0x1800008,0x0,0x0,0x400,0x1800007,0x1800007,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x948,0x0,0x0,0x0,0x0,0x0,0x8,0x948,0x8,0x0,0x7,0x7,0x0,0x8,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x948,0x0,0x0,0x0,0x0,0x0,0x8,0x8,};
	}

  /** Constructor with InputStream. */
  public CompiladorCSharp(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorCSharp(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompiladorCSharpTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CompiladorCSharp(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompiladorCSharpTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompiladorCSharpTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CompiladorCSharp(CompiladorCSharpTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorCSharpTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 44; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[77];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 44; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 77; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
