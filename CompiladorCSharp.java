/* CompiladorCSharp.java */
/* Generated By:JavaCC: Do not edit this line. CompiladorCSharp.java */
package compiler;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class CompiladorCSharp implements CompiladorCSharpConstants {

    public static void main(String[] args) {
        try {
            String programa = Read("codigoTeste.txt");
            new CompiladorCSharp(new java.io.StringReader(programa)).RUN();
            System.out.println("\n\nA Sintaxe Correta. Compilado com Sucesso!.");
        } catch(Throwable e) {
            System.out.println("\n\nErro na sintaxe: " + e.getMessage());
        }
    }

    public static String Read(String caminho) throws Exception {
        StringBuilder conteudo = new StringBuilder();
        try {
            FileReader arq = new FileReader(caminho);
            BufferedReader lerArq = new BufferedReader(arq);
            String linha;
            while ((linha = lerArq.readLine()) != null) {
                conteudo.append(linha).append("\n");
            }
            arq.close();
        } catch (FileNotFoundException ex) {
            throw new Exception("Arquivo nao encontrado: " + ex.getMessage());
        } catch (IOException ex) {
            throw new Exception("Erro na leitura do arquivo: " + ex.getMessage());
        }
        return conteudo.toString();
    }

/****************************************
* ******** GRAMATICA LINGUAGEM C# *******
*****************************************/
  static final public 
void RUN() throws ParseException {
    iniciarPrograma();
}

  static final public void iniciarPrograma() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_USING:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      using();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_NAMESPACE:{
      namespace();
      break;
      }
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case INTERNAl:{
      classePrincipal();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/*  ESTRUTURA GERAL DE UM PROJETO EM C#
                IMPORTACOES : using System
                NAMESPACE  :   namespace {   [public class Atividade1 {  }]    }(PODE EXISTIR OU NAO)
                PRINCIPAL DA CLASE: public class Atividade1 {  }
* */
  static final public 
void using() throws ParseException {
    jj_consume_token(PALAVRA_USING);
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PONTO:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(PONTO);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(PONTO_VIRGULA);
}

/*DECLARANDO AS IMPORTACOES DAS BIBLIOTECAS EM C#: using System;
                                                   using System.Mathematics.pow; (extendida)
* */
  static final public 
void namespace() throws ParseException {
    jj_consume_token(PALAVRA_NAMESPACE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_CHAVE);
    classePrincipal();
    jj_consume_token(FECHA_CHAVE);
}

/*DECLARACAO DO NAMESPACE DO PACOTE? namespace Atividade1 {   [aqui fica public class]    }
* */
  static final public 
void classePrincipal() throws ParseException {
    modificador();
    jj_consume_token(PALAVRA_CLASS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_CHAVE);
    corpoClasse();
    jj_consume_token(FECHA_CHAVE);
}

/*DECLARA A CLASSE PRINCIPAL :  public class Atividade1 {    [Main fica aqui] }
* */
  static final public 
void corpoClasse() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPO_INT:
      case TIPO_VAR:
      case TIPO_FLOAT:
      case TIPO_BOOL:
      case TIPO_CHAR:
      case TIPO_STRING:
      case PALAVRA_VOID:
      case STATIC:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case INTERNAl:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case INTERNAl:{
        modificador();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      tipoDeDados();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PONTO_VIRGULA:
        case VIRGULA:
        case RECEBE:{
          instanciarVariavel();
          break;
          }
        case ABRE_PARENTESES:{
          instanciaFuncao();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case PALAVRA_MAIN:{
        main();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/*PODE SER DECLARACAO public static string nome = "oe"
           FUNCAO      public static void print(){ }
           MAIN        public static void Main(String[] args){ }
           CONSTRUTOR
* */
  static final public 
void instanciarVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RECEBE:{
      jj_consume_token(RECEBE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PALAVRA_NULL:
      case TRUE:
      case FALSE:
      case ABRE_PARENTESES:
      case NEGACAO:
      case INCREMENTO:
      case DECREMENTO:
      case MAIS:
      case MENOS:
      case IDENTIFICADOR:
      case INTEGER_LITERAL:
      case FLOATING_LITERAL:
      case STRING_LITERAL:{
        expressao();
        break;
        }
      case INPUT:{
        input();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RECEBE:{
        jj_consume_token(RECEBE);
        expressao();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    }
    jj_consume_token(PONTO_VIRGULA);
}

/* INSTANCIA A VARIAVEL :  = (expressao |null | true | false )/
   OU VARIAS SEGUIDAS   = "rom" , sobrenome = "ferr", nomeCompleto = "rom ferr"/
                         , nome2, nome3,
       INPUT            = Console.ReadLine()
* */
  static final public 
void main() throws ParseException {
    jj_consume_token(PALAVRA_MAIN);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(TIPO_STRING);
    jj_consume_token(ABRE_COLCHETE);
    jj_consume_token(FECHA_COLCHETE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FECHA_PARENTESES);
    blocoDeclaracoes();
}

/* INSTANCIA O CORPO DA CLASSE COMO UM MAIN:  public static void Main(string[] args) { }
* */
  static final public 
void instanciaFuncao() throws ParseException {
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPO_INT:
    case TIPO_VAR:
    case TIPO_FLOAT:
    case TIPO_BOOL:
    case TIPO_CHAR:
    case TIPO_STRING:
    case PALAVRA_VOID:{
      listaParametros();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    blocoDeclaracoes();
}

/*  INSTANCIA A VARIAVEL COMO UMA FUNCAO :  ( string nome, int numero ) { }
                                            () { }

* */
  static final public 
void listaParametros() throws ParseException {
    tipoDeDados();
    jj_consume_token(IDENTIFICADOR);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      tipoDeDados();
      jj_consume_token(IDENTIFICADOR);
    }
}

/* LISTA DE PARAMETROS DE UMA FUNCAO : string nome
                                     : string nome, string sobrenome, int idade
* */
  static final public 


void blocoDeclaracoes() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPO_INT:
      case TIPO_VAR:
      case TIPO_FLOAT:
      case TIPO_BOOL:
      case TIPO_CHAR:
      case TIPO_STRING:
      case PALAVRA_VOID:
      case RETURN:
      case IF:
      case PRINT:
      case INPUT:
      case WHILE:
      case INCREMENTO:
      case DECREMENTO:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      corpoDeclaracao();
    }
    jj_consume_token(FECHA_CHAVE);
}

/*  BLOCO DE CODIGO DA DECLARACAO DE TODAS AS DECLARAÇÕES:  {  [ if| print| while| expressao | return | declarar variavel] }
* */
  static final public 
void chamarFuncao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PALAVRA_NULL:
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case INCREMENTO:
    case DECREMENTO:
    case MAIS:
    case MENOS:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case STRING_LITERAL:{
      listaDeArgumentos();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO_VIRGULA);
}

  static final public void corpoDeclaracao() throws ParseException {
    if (jj_2_1(2147483647)) {
      chamarFuncao();
    } else if (jj_2_2(2147483647)) {
      atribuirVariavel();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTO:
      case DECREMENTO:{
        incrementoOuDecremento();
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      case TIPO_INT:
      case TIPO_VAR:
      case TIPO_FLOAT:
      case TIPO_BOOL:
      case TIPO_CHAR:
      case TIPO_STRING:
      case PALAVRA_VOID:{
        declararVariavel();
        break;
        }
      case RETURN:{
        retornoFuncao();
        break;
        }
      case IF:{
        condicionalIfElse();
        break;
        }
      case PRINT:{
        print();
        break;
        }
      case INPUT:{
        input();
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      case WHILE:{
        While();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public boolean chamarFuncaoLookahead() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_PARENTESES);
{if ("" != null) return true;}
    throw new Error("Missing return statement in function");
}

  static final public boolean atribuirVariavelLookahead() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RECEBE:{
      jj_consume_token(RECEBE);
      break;
      }
    case MAIS_IGUAL:{
      jj_consume_token(MAIS_IGUAL);
      break;
      }
    case MENOS_IGUAL:{
      jj_consume_token(MENOS_IGUAL);
      break;
      }
    case ASTERISCO_IGUAL:{
      jj_consume_token(ASTERISCO_IGUAL);
      break;
      }
    case BARRA_IGUAL:{
      jj_consume_token(BARRA_IGUAL);
      break;
      }
    case PORCENTO_IGUAL:{
      jj_consume_token(PORCENTO_IGUAL);
      break;
      }
    case INCREMENTO:{
      jj_consume_token(INCREMENTO);
      break;
      }
    case DECREMENTO:{
      jj_consume_token(DECREMENTO);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return true;}
    throw new Error("Missing return statement in function");
}

/* CORPO PRINCIPAL DA APLICAÃO COM AS PRINCIPAIS CARACTERISTICAS DA LINGUAGEM COMO:
           DECLARAR UMA VARIAVEL :  string nome [ = expressao | true | false| null]
           RETORNO DA FUNCAO: return [ = expressao | true | false| null];
           IF e ELSE : if(){}    if(){} else{}
           PRINT : Console.WriteLine("teste");
           INPUT : Console.ReadLine();
           WHILE   : while(expressao| true | false) {}
           EXPRESSAO : ...
* */
  static final public 
void declararVariavel() throws ParseException {
    tipoDeDados();
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PONTO_VIRGULA:
    case VIRGULA:
    case RECEBE:{
      instanciarVariavel();
      break;
      }
    case ABRE_PARENTESES:{
      instanciaFuncao();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* DECLARA UMA VARIAVEL:   string nome [ = expressao | true | false| null]
                FUNCAO :  string getnome(lista, lista)
* */
  static final public 
void atribuirVariavel() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RECEBE:{
      jj_consume_token(RECEBE);
      expressao();
      break;
      }
    case INCREMENTO:{
      jj_consume_token(INCREMENTO);
      break;
      }
    case DECREMENTO:{
      jj_consume_token(DECREMENTO);
      break;
      }
    case MAIS_IGUAL:
    case MENOS_IGUAL:
    case ASTERISCO_IGUAL:
    case BARRA_IGUAL:
    case PORCENTO_IGUAL:{
      expressaoNumericaComAtribuicao();
      expressao();
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PONTO_VIRGULA);
}

/* ATRIBUI UM VALOR A VARIAVEL:   nome [ = expressao | true | false| null]
                                   nome++;
                                   ++nome;
                                   nome += expressao ;
* */
  static final public 

void expressaoNumericaComAtribuicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIS_IGUAL:{
      jj_consume_token(MAIS_IGUAL);
      break;
      }
    case MENOS_IGUAL:{
      jj_consume_token(MENOS_IGUAL);
      break;
      }
    case ASTERISCO_IGUAL:{
      jj_consume_token(ASTERISCO_IGUAL);
      break;
      }
    case BARRA_IGUAL:{
      jj_consume_token(BARRA_IGUAL);
      break;
      }
    case PORCENTO_IGUAL:{
      jj_consume_token(PORCENTO_IGUAL);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* FAZ O FINAL DE UMA OPERACAO ARITMETRICA COMM ATRIBUICAO [valor ] +=  10
* */
  static final public 
void retornoFuncao() throws ParseException {
    jj_consume_token(RETURN);
    expressao();
    jj_consume_token(PONTO_VIRGULA);
}

/* RETORNO DE UMA FUNCAO:   return [ = expressao | true | false| null];
* */
  static final public 
void condicionalIfElse() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    expressao();
    jj_consume_token(FECHA_PARENTESES);
    blocoDeclaracoesWhile();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      if (jj_2_3(2147483647)) {
        opcaoElseIf();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABRE_CHAVE:{
          blocoDeclaracoesWhile();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
}

  static final public void opcaoElseIf() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    expressao();
    jj_consume_token(FECHA_PARENTESES);
    blocoDeclaracoesWhile();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      if (jj_2_4(2147483647)) {
        opcaoElseIf();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABRE_CHAVE:{
          blocoDeclaracoesWhile();
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
}

  static final public void expressao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENTO:
    case DECREMENTO:{
      incrementoOuDecremento();
      break;
      }
    case PALAVRA_NULL:
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case MAIS:
    case MENOS:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case STRING_LITERAL:{
      avaliarTermoLogico();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OR:
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          jj_consume_token(AND);
          break;
          }
        case OR:{
          jj_consume_token(OR);
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        avaliarTermoLogico();
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void avaliarTermoLogico() throws ParseException {
    criarItem();
    complementoComparacao();
}

  static final public void complementoComparacao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIOR:
    case MENOR:
    case IGUAL:
    case MAIOR_IGUAL:
    case MENOR_IGUAL:
    case DIFERENTE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAIOR:{
        jj_consume_token(MAIOR);
        break;
        }
      case MENOR_IGUAL:{
        jj_consume_token(MENOR_IGUAL);
        break;
        }
      case MAIOR_IGUAL:{
        jj_consume_token(MAIOR_IGUAL);
        break;
        }
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      criarItem();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      ;
    }
}

/* EXPRESSOES DA GRAMATICA
            TRUE | FALSE | !TRUE | ! FALSE| NULL
            COMPARACOES : 9> 2
            OPERACOES: 2+2   | 3/8 | 3%1 ...
            E LOGICAS COMPLEXAS COM PARENTESES

* */
  static final public 
void criarItem() throws ParseException {
    definirTermo();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:{
        jj_consume_token(MAIS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      definirTermo();
    }
}

  static final public void definirTermo() throws ParseException {
    itemUnico();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISCO:
      case BARRA:
      case PORCENTO:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISCO:{
        jj_consume_token(ASTERISCO);
        break;
        }
      case BARRA:{
        jj_consume_token(BARRA);
        break;
        }
      case PORCENTO:{
        jj_consume_token(PORCENTO);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      itemUnico();
    }
}

  static final public void itemUnico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAIS:
    case MENOS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAIS:{
        jj_consume_token(MAIS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    avaliarItem();
}

  static final public void avaliarItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER_LITERAL:{
      jj_consume_token(INTEGER_LITERAL);
      break;
      }
    case STRING_LITERAL:{
      jj_consume_token(STRING_LITERAL);
      break;
      }
    case FLOATING_LITERAL:{
      jj_consume_token(FLOATING_LITERAL);
      break;
      }
    case PALAVRA_NULL:{
      jj_consume_token(PALAVRA_NULL);
      break;
      }
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case IDENTIFICADOR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEGACAO:{
        jj_consume_token(NEGACAO);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFICADOR:{
        expressaoVariavel();
        break;
        }
      case ABRE_PARENTESES:{
        jj_consume_token(ABRE_PARENTESES);
        expressao();
        jj_consume_token(FECHA_PARENTESES);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* UM ITEM PODE SER QUALQUER VALOR:
                        INTEIRO: 3
                        STRING: "rom"
                        FLOATING: 5.9f
                        NULL: null
               VALORES COM NEGACAO:  ! [ variavel(tipo bool | funcao tipo bool)  | expressao (5>7) | true | false]
*/
  static final public 
void expressaoVariavel() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ABRE_PARENTESES:
    case INCREMENTO:
    case DECREMENTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTO:{
        jj_consume_token(INCREMENTO);
        break;
        }
      case DECREMENTO:{
        jj_consume_token(DECREMENTO);
        break;
        }
      case ABRE_PARENTESES:{
        jj_consume_token(ABRE_PARENTESES);
        listaDeArgumentos();
        jj_consume_token(FECHA_PARENTESES);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
}

  static final public void incrementoOuDecremento() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENTO:{
      jj_consume_token(INCREMENTO);
      break;
      }
    case DECREMENTO:{
      jj_consume_token(DECREMENTO);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFICADOR);
}

/*  CASO HAJA UMA VARIAVEL NA EXPRESSAO ELA TEM OS CAMINHOS:
                                         FUNCAO: soma(2,3)
                                         INCREMENTO: soma++
                                         DECREMENTO: soma--
                                         SO O VALOR DA VARIAVEL: soma
* */
  static final public 
void print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(ABRE_PARENTESES);
    expressao();
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO_VIRGULA);
}

/*PRINT : Console.WriteLine("teste");
* */
  static final public 
void input() throws ParseException {
    jj_consume_token(INPUT);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(FECHA_PARENTESES);
}

/*PRINT : INPUT : Console.ReadLine()
* */
  static final public 
void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRE_PARENTESES);
    expressao();
    jj_consume_token(FECHA_PARENTESES);
    blocoDeclaracoesWhile();
}

/*WHILE   : while(expressao| true | false) {}
* */
  static final public 
void modificador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRIVATE:{
      jj_consume_token(PRIVATE);
      break;
      }
    case PROTECTED:{
      jj_consume_token(PROTECTED);
      break;
      }
    case PUBLIC:{
      jj_consume_token(PUBLIC);
      break;
      }
    case INTERNAl:{
      jj_consume_token(INTERNAl);
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* MODIFICADORES DE ACESSO DA CLASSE, FUNCAO OU VARIAVEL
           public int = 1 | protected nome = "rom"| private senha = "88" | internal some()
* */
  static final public void tipoDeDados() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TIPO_INT:{
      jj_consume_token(TIPO_INT);
      break;
      }
    case TIPO_FLOAT:{
      jj_consume_token(TIPO_FLOAT);
      break;
      }
    case TIPO_STRING:{
      jj_consume_token(TIPO_STRING);
      break;
      }
    case TIPO_CHAR:{
      jj_consume_token(TIPO_CHAR);
      break;
      }
    case TIPO_BOOL:{
      jj_consume_token(TIPO_BOOL);
      break;
      }
    case PALAVRA_VOID:{
      jj_consume_token(PALAVRA_VOID);
      break;
      }
    case TIPO_VAR:{
      jj_consume_token(TIPO_VAR);
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* TIPO DE DADO DA VARIAVEL | FUNCAO E CLASSE;
* */
  static final public 
void listaDeArgumentos() throws ParseException {
    expressao();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VIRGULA:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_10;
      }
      jj_consume_token(VIRGULA);
      expressao();
    }
}

/* LISTA DE ARGUMENTOS DE UMA FUNCAO: soma(2, 2)
* */
  static final public 
void blocoDeclaracoesWhile() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIPO_INT:
      case TIPO_VAR:
      case TIPO_FLOAT:
      case TIPO_BOOL:
      case TIPO_CHAR:
      case TIPO_STRING:
      case PALAVRA_VOID:
      case RETURN:
      case IF:
      case PRINT:
      case INPUT:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case INCREMENTO:
      case DECREMENTO:
      case IDENTIFICADOR:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_11;
      }
      corpoDaDeclaracaoWhile();
    }
    jj_consume_token(FECHA_CHAVE);
}

  static final public void corpoDaDeclaracaoWhile() throws ParseException {
    if (jj_2_5(2147483647)) {
      chamarFuncao();
    } else if (jj_2_6(2147483647)) {
      atribuirVariavel();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCREMENTO:
      case DECREMENTO:{
        incrementoOuDecremento();
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      case RETURN:{
        retornoFuncao();
        break;
        }
      case TIPO_INT:
      case TIPO_VAR:
      case TIPO_FLOAT:
      case TIPO_BOOL:
      case TIPO_CHAR:
      case TIPO_STRING:
      case PALAVRA_VOID:{
        declararVariavel();
        break;
        }
      case IF:{
        condicionalIfElse();
        break;
        }
      case PRINT:{
        print();
        break;
        }
      case INPUT:{
        input();
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      case WHILE:{
        While();
        break;
        }
      case BREAK:{
        jj_consume_token(BREAK);
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      case CONTINUE:{
        jj_consume_token(CONTINUE);
        jj_consume_token(PONTO_VIRGULA);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_chamarFuncaoLookahead_258_5_12()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(ABRE_PARENTESES)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_chamarFuncaoLookahead_258_5_12()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_atribuirVariavelLookahead_263_5_13()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_atribuirVariavelLookahead_263_5_13()
 {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_chamarFuncaoLookahead_258_5_12()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_atribuirVariavelLookahead_263_5_13()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorCSharpTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x8000,0x3c10000,0x0,0x3e83f00,0x3c00000,0x200000,0x0,0x40000,0xb0004000,0x0,0x0,0x0,0x83f00,0x0,0xc4183f00,0x30004000,0xc4183f00,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x30004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30000000,0x30004000,0x0,0x0,0x0,0x3c00000,0x83f00,0x0,0xc4183f00,0xc4183f00,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x800,0x0,0x0,0x0,0x1608,0x0,0x7808008,0x1000,0x400,0x1000,0x0,0x400,0x1800001,0x7808008,0x1800001,0xc1801000,0x1608,0xc1801000,0xc0000000,0x20,0x0,0x20,0x0,0x600000,0x600000,0x7808008,0x1e6000,0x1e6000,0x6000000,0x6000000,0x38000000,0x38000000,0x6000000,0x6000000,0x8000,0x8,0x8008,0x1800008,0x1800008,0x1800000,0x0,0x0,0x400,0x1800007,0x1800007,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x948,0x0,0x0,0x0,0x0,0x0,0x8,0x948,0x0,0x7,0x0,0x7,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x948,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x948,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CompiladorCSharp(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CompiladorCSharp(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CompiladorCSharpTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CompiladorCSharp(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CompiladorCSharpTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CompiladorCSharpTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CompiladorCSharp(CompiladorCSharpTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompiladorCSharpTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[77];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 47; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 77; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 6; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
